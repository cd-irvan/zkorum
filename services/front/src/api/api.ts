/* tslint:disable */
/* eslint-disable */
/**
 * ZKorum
 * ZKorum backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthAuthenticatePost200Response
 */
export interface AuthAuthenticatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost200Response
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost200Response
     */
    'nextCodeSoonestTime': string;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409Response
 */
export interface AuthAuthenticatePost409Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'reason': AuthAuthenticatePost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409Response
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; }}
     * @memberof AuthAuthenticatePost409Response
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; };
}

export const AuthAuthenticatePost409ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type AuthAuthenticatePost409ResponseReasonEnum = typeof AuthAuthenticatePost409ResponseReasonEnum[keyof typeof AuthAuthenticatePost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf
 */
export interface AuthAuthenticatePost409ResponseAnyOf {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf
     */
    'reason': AuthAuthenticatePost409ResponseAnyOfReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf
     */
    'userId': string;
}

export const AuthAuthenticatePost409ResponseAnyOfReasonEnum = {
    AwaitingSyncing: 'awaiting_syncing'
} as const;

export type AuthAuthenticatePost409ResponseAnyOfReasonEnum = typeof AuthAuthenticatePost409ResponseAnyOfReasonEnum[keyof typeof AuthAuthenticatePost409ResponseAnyOfReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1
 */
export interface AuthAuthenticatePost409ResponseAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'reason': AuthAuthenticatePost409ResponseAnyOf1ReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; }}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; };
}

export const AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = typeof AuthAuthenticatePost409ResponseAnyOf1ReasonEnum[keyof typeof AuthAuthenticatePost409ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
 */
export interface AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'active'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'revoked': Array<string>;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue
 */
export interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue {
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue
     */
    'active'?: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive;
    /**
     * 
     * @type {Array<AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue
     */
    'revoked': Array<AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive>;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive
 */
export interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive
     */
    'encodedBlindedCredential': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive
     */
    'encryptedBlinding': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValueActive
     */
    'encryptedBlindedSubject': string;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePostRequest
 */
export interface AuthAuthenticatePostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof AuthAuthenticatePostRequest
     */
    'email': string;
    /**
     * Decentralized Identifier with did:key method
     * @type {string}
     * @memberof AuthAuthenticatePostRequest
     */
    'didExchange': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthAuthenticatePostRequest
     */
    'isRequestingNewCode': boolean;
}
/**
 * 
 * @export
 * @interface AuthSyncPost409Response
 */
export interface AuthSyncPost409Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPost409Response
     */
    'reason': AuthSyncPost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPost409Response
     */
    'userId': string;
}

export const AuthSyncPost409ResponseReasonEnum = {
    AlreadySyncing: 'already_syncing'
} as const;

export type AuthSyncPost409ResponseReasonEnum = typeof AuthSyncPost409ResponseReasonEnum[keyof typeof AuthSyncPost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthSyncPostRequest
 */
export interface AuthSyncPostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof AuthSyncPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPostRequest
     */
    'secretBlindedCredentialRequest'?: string;
}
/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200Response
 */
export interface AuthVerifyOtpPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthVerifyOtpPost200Response
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; }}
     * @memberof AuthVerifyOtpPost200Response
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; };
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'reason': AuthVerifyOtpPost200ResponseReasonEnum;
}

export const AuthVerifyOtpPost200ResponseReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess'
} as const;

export type AuthVerifyOtpPost200ResponseReasonEnum = typeof AuthVerifyOtpPost200ResponseReasonEnum[keyof typeof AuthVerifyOtpPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200ResponseAnyOf
 */
export interface AuthVerifyOtpPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; }}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; };
}
/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200ResponseAnyOf1
 */
export interface AuthVerifyOtpPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf1
     */
    'reason': AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum;
}

export const AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess'
} as const;

export type AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = typeof AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum[keyof typeof AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPostRequest
 */
export interface AuthVerifyOtpPostRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthVerifyOtpPostRequest
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPostRequest
     */
    'encryptedSymmKey': string;
}
/**
 * 
 * @export
 * @interface CredentialGetPost200Response
 */
export interface CredentialGetPost200Response {
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof CredentialGetPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; }}
     * @memberof CredentialGetPost200Response
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeValue; };
}
/**
 * 
 * @export
 * @interface CredentialRequestPostRequest
 */
export interface CredentialRequestPostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof CredentialRequestPostRequest
     */
    'email': string;
    /**
     * 
     * @type {CredentialRequestPostRequestEmailCredentialRequest}
     * @memberof CredentialRequestPostRequest
     */
    'emailCredentialRequest': CredentialRequestPostRequestEmailCredentialRequest;
    /**
     * 
     * @type {CredentialRequestPostRequestSecretCredentialRequest}
     * @memberof CredentialRequestPostRequest
     */
    'secretCredentialRequest': CredentialRequestPostRequestSecretCredentialRequest;
}
/**
 * 
 * @export
 * @interface CredentialRequestPostRequestEmailCredentialRequest
 */
export interface CredentialRequestPostRequestEmailCredentialRequest {
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequest
     */
    'type': CredentialRequestPostRequestEmailCredentialRequestTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequest
     */
    'campus': CredentialRequestPostRequestEmailCredentialRequestCampusEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequest
     */
    'program': CredentialRequestPostRequestEmailCredentialRequestProgramEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CredentialRequestPostRequestEmailCredentialRequest
     */
    'countries': Array<CredentialRequestPostRequestEmailCredentialRequestCountriesEnum>;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequest
     */
    'admissionYear': number;
}

export const CredentialRequestPostRequestEmailCredentialRequestTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestTypeEnum = typeof CredentialRequestPostRequestEmailCredentialRequestTypeEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestTypeEnum];
export const CredentialRequestPostRequestEmailCredentialRequestCampusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestCampusEnum = typeof CredentialRequestPostRequestEmailCredentialRequestCampusEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestCampusEnum];
export const CredentialRequestPostRequestEmailCredentialRequestProgramEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestProgramEnum = typeof CredentialRequestPostRequestEmailCredentialRequestProgramEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestProgramEnum];
export const CredentialRequestPostRequestEmailCredentialRequestCountriesEnum = {
    Ad: 'AD',
    Ae: 'AE',
    Af: 'AF',
    Ag: 'AG',
    Ai: 'AI',
    Al: 'AL',
    Am: 'AM',
    Ao: 'AO',
    Aq: 'AQ',
    Ar: 'AR',
    As: 'AS',
    At: 'AT',
    Au: 'AU',
    Aw: 'AW',
    Ax: 'AX',
    Az: 'AZ',
    Ba: 'BA',
    Bb: 'BB',
    Bd: 'BD',
    Be: 'BE',
    Bf: 'BF',
    Bg: 'BG',
    Bh: 'BH',
    Bi: 'BI',
    Bj: 'BJ',
    Bl: 'BL',
    Bm: 'BM',
    Bn: 'BN',
    Bo: 'BO',
    Bq: 'BQ',
    Br: 'BR',
    Bs: 'BS',
    Bt: 'BT',
    Bv: 'BV',
    Bw: 'BW',
    By: 'BY',
    Bz: 'BZ',
    Ca: 'CA',
    Cc: 'CC',
    Cd: 'CD',
    Cf: 'CF',
    Cg: 'CG',
    Ch: 'CH',
    Ci: 'CI',
    Ck: 'CK',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cr: 'CR',
    Cu: 'CU',
    Cv: 'CV',
    Cw: 'CW',
    Cx: 'CX',
    Cy: 'CY',
    Cz: 'CZ',
    De: 'DE',
    Dj: 'DJ',
    Dk: 'DK',
    Dm: 'DM',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Ee: 'EE',
    Eg: 'EG',
    Eh: 'EH',
    Er: 'ER',
    Es: 'ES',
    Et: 'ET',
    Fi: 'FI',
    Fj: 'FJ',
    Fk: 'FK',
    Fm: 'FM',
    Fo: 'FO',
    Fr: 'FR',
    Ga: 'GA',
    Gb: 'GB',
    Gd: 'GD',
    Ge: 'GE',
    Gf: 'GF',
    Gg: 'GG',
    Gh: 'GH',
    Gi: 'GI',
    Gl: 'GL',
    Gm: 'GM',
    Gn: 'GN',
    Gp: 'GP',
    Gq: 'GQ',
    Gr: 'GR',
    Gs: 'GS',
    Gt: 'GT',
    Gu: 'GU',
    Gw: 'GW',
    Gy: 'GY',
    Hk: 'HK',
    Hm: 'HM',
    Hn: 'HN',
    Hr: 'HR',
    Ht: 'HT',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    Io: 'IO',
    Iq: 'IQ',
    Ir: 'IR',
    Is: 'IS',
    It: 'IT',
    Je: 'JE',
    Jm: 'JM',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kg: 'KG',
    Kh: 'KH',
    Ki: 'KI',
    Km: 'KM',
    Kn: 'KN',
    Kp: 'KP',
    Kr: 'KR',
    Kw: 'KW',
    Ky: 'KY',
    Kz: 'KZ',
    La: 'LA',
    Lb: 'LB',
    Lc: 'LC',
    Li: 'LI',
    Lk: 'LK',
    Lr: 'LR',
    Ls: 'LS',
    Lt: 'LT',
    Lu: 'LU',
    Lv: 'LV',
    Ly: 'LY',
    Ma: 'MA',
    Mc: 'MC',
    Md: 'MD',
    Me: 'ME',
    Mf: 'MF',
    Mg: 'MG',
    Mh: 'MH',
    Mk: 'MK',
    Ml: 'ML',
    Mm: 'MM',
    Mn: 'MN',
    Mo: 'MO',
    Mp: 'MP',
    Mq: 'MQ',
    Mr: 'MR',
    Ms: 'MS',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mw: 'MW',
    Mx: 'MX',
    My: 'MY',
    Mz: 'MZ',
    Na: 'NA',
    Nc: 'NC',
    Ne: 'NE',
    Nf: 'NF',
    Ng: 'NG',
    Ni: 'NI',
    Nl: 'NL',
    No: 'NO',
    Np: 'NP',
    Nr: 'NR',
    Nu: 'NU',
    Nz: 'NZ',
    Om: 'OM',
    Pa: 'PA',
    Pe: 'PE',
    Pf: 'PF',
    Pg: 'PG',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pm: 'PM',
    Pn: 'PN',
    Pr: 'PR',
    Ps: 'PS',
    Pt: 'PT',
    Pw: 'PW',
    Py: 'PY',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Rs: 'RS',
    Ru: 'RU',
    Rw: 'RW',
    Sa: 'SA',
    Sb: 'SB',
    Sc: 'SC',
    Sd: 'SD',
    Se: 'SE',
    Sg: 'SG',
    Sh: 'SH',
    Si: 'SI',
    Sj: 'SJ',
    Sk: 'SK',
    Sl: 'SL',
    Sm: 'SM',
    Sn: 'SN',
    So: 'SO',
    Sr: 'SR',
    Ss: 'SS',
    St: 'ST',
    Sv: 'SV',
    Sx: 'SX',
    Sy: 'SY',
    Sz: 'SZ',
    Tc: 'TC',
    Td: 'TD',
    Tf: 'TF',
    Tg: 'TG',
    Th: 'TH',
    Tj: 'TJ',
    Tk: 'TK',
    Tl: 'TL',
    Tm: 'TM',
    Tn: 'TN',
    To: 'TO',
    Tr: 'TR',
    Tt: 'TT',
    Tv: 'TV',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Um: 'UM',
    Us: 'US',
    Uy: 'UY',
    Uz: 'UZ',
    Va: 'VA',
    Vc: 'VC',
    Ve: 'VE',
    Vg: 'VG',
    Vi: 'VI',
    Vn: 'VN',
    Vu: 'VU',
    Wf: 'WF',
    Ws: 'WS',
    Xk: 'XK',
    Ye: 'YE',
    Yt: 'YT',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestCountriesEnum = typeof CredentialRequestPostRequestEmailCredentialRequestCountriesEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestCountriesEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestEmailCredentialRequestAnyOf
 */
export interface CredentialRequestPostRequestEmailCredentialRequestAnyOf {
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf
     */
    'type': CredentialRequestPostRequestEmailCredentialRequestAnyOfTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf
     */
    'campus': CredentialRequestPostRequestEmailCredentialRequestAnyOfCampusEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf
     */
    'program': CredentialRequestPostRequestEmailCredentialRequestAnyOfProgramEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf
     */
    'countries': Array<CredentialRequestPostRequestEmailCredentialRequestAnyOfCountriesEnum>;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf
     */
    'admissionYear': number;
}

export const CredentialRequestPostRequestEmailCredentialRequestAnyOfTypeEnum = {
    NUMBER_0: 0
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestAnyOfTypeEnum = typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfTypeEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfTypeEnum];
export const CredentialRequestPostRequestEmailCredentialRequestAnyOfCampusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestAnyOfCampusEnum = typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfCampusEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfCampusEnum];
export const CredentialRequestPostRequestEmailCredentialRequestAnyOfProgramEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestAnyOfProgramEnum = typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfProgramEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfProgramEnum];
export const CredentialRequestPostRequestEmailCredentialRequestAnyOfCountriesEnum = {
    Ad: 'AD',
    Ae: 'AE',
    Af: 'AF',
    Ag: 'AG',
    Ai: 'AI',
    Al: 'AL',
    Am: 'AM',
    Ao: 'AO',
    Aq: 'AQ',
    Ar: 'AR',
    As: 'AS',
    At: 'AT',
    Au: 'AU',
    Aw: 'AW',
    Ax: 'AX',
    Az: 'AZ',
    Ba: 'BA',
    Bb: 'BB',
    Bd: 'BD',
    Be: 'BE',
    Bf: 'BF',
    Bg: 'BG',
    Bh: 'BH',
    Bi: 'BI',
    Bj: 'BJ',
    Bl: 'BL',
    Bm: 'BM',
    Bn: 'BN',
    Bo: 'BO',
    Bq: 'BQ',
    Br: 'BR',
    Bs: 'BS',
    Bt: 'BT',
    Bv: 'BV',
    Bw: 'BW',
    By: 'BY',
    Bz: 'BZ',
    Ca: 'CA',
    Cc: 'CC',
    Cd: 'CD',
    Cf: 'CF',
    Cg: 'CG',
    Ch: 'CH',
    Ci: 'CI',
    Ck: 'CK',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cr: 'CR',
    Cu: 'CU',
    Cv: 'CV',
    Cw: 'CW',
    Cx: 'CX',
    Cy: 'CY',
    Cz: 'CZ',
    De: 'DE',
    Dj: 'DJ',
    Dk: 'DK',
    Dm: 'DM',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Ee: 'EE',
    Eg: 'EG',
    Eh: 'EH',
    Er: 'ER',
    Es: 'ES',
    Et: 'ET',
    Fi: 'FI',
    Fj: 'FJ',
    Fk: 'FK',
    Fm: 'FM',
    Fo: 'FO',
    Fr: 'FR',
    Ga: 'GA',
    Gb: 'GB',
    Gd: 'GD',
    Ge: 'GE',
    Gf: 'GF',
    Gg: 'GG',
    Gh: 'GH',
    Gi: 'GI',
    Gl: 'GL',
    Gm: 'GM',
    Gn: 'GN',
    Gp: 'GP',
    Gq: 'GQ',
    Gr: 'GR',
    Gs: 'GS',
    Gt: 'GT',
    Gu: 'GU',
    Gw: 'GW',
    Gy: 'GY',
    Hk: 'HK',
    Hm: 'HM',
    Hn: 'HN',
    Hr: 'HR',
    Ht: 'HT',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    Io: 'IO',
    Iq: 'IQ',
    Ir: 'IR',
    Is: 'IS',
    It: 'IT',
    Je: 'JE',
    Jm: 'JM',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kg: 'KG',
    Kh: 'KH',
    Ki: 'KI',
    Km: 'KM',
    Kn: 'KN',
    Kp: 'KP',
    Kr: 'KR',
    Kw: 'KW',
    Ky: 'KY',
    Kz: 'KZ',
    La: 'LA',
    Lb: 'LB',
    Lc: 'LC',
    Li: 'LI',
    Lk: 'LK',
    Lr: 'LR',
    Ls: 'LS',
    Lt: 'LT',
    Lu: 'LU',
    Lv: 'LV',
    Ly: 'LY',
    Ma: 'MA',
    Mc: 'MC',
    Md: 'MD',
    Me: 'ME',
    Mf: 'MF',
    Mg: 'MG',
    Mh: 'MH',
    Mk: 'MK',
    Ml: 'ML',
    Mm: 'MM',
    Mn: 'MN',
    Mo: 'MO',
    Mp: 'MP',
    Mq: 'MQ',
    Mr: 'MR',
    Ms: 'MS',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mw: 'MW',
    Mx: 'MX',
    My: 'MY',
    Mz: 'MZ',
    Na: 'NA',
    Nc: 'NC',
    Ne: 'NE',
    Nf: 'NF',
    Ng: 'NG',
    Ni: 'NI',
    Nl: 'NL',
    No: 'NO',
    Np: 'NP',
    Nr: 'NR',
    Nu: 'NU',
    Nz: 'NZ',
    Om: 'OM',
    Pa: 'PA',
    Pe: 'PE',
    Pf: 'PF',
    Pg: 'PG',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pm: 'PM',
    Pn: 'PN',
    Pr: 'PR',
    Ps: 'PS',
    Pt: 'PT',
    Pw: 'PW',
    Py: 'PY',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Rs: 'RS',
    Ru: 'RU',
    Rw: 'RW',
    Sa: 'SA',
    Sb: 'SB',
    Sc: 'SC',
    Sd: 'SD',
    Se: 'SE',
    Sg: 'SG',
    Sh: 'SH',
    Si: 'SI',
    Sj: 'SJ',
    Sk: 'SK',
    Sl: 'SL',
    Sm: 'SM',
    Sn: 'SN',
    So: 'SO',
    Sr: 'SR',
    Ss: 'SS',
    St: 'ST',
    Sv: 'SV',
    Sx: 'SX',
    Sy: 'SY',
    Sz: 'SZ',
    Tc: 'TC',
    Td: 'TD',
    Tf: 'TF',
    Tg: 'TG',
    Th: 'TH',
    Tj: 'TJ',
    Tk: 'TK',
    Tl: 'TL',
    Tm: 'TM',
    Tn: 'TN',
    To: 'TO',
    Tr: 'TR',
    Tt: 'TT',
    Tv: 'TV',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Um: 'UM',
    Us: 'US',
    Uy: 'UY',
    Uz: 'UZ',
    Va: 'VA',
    Vc: 'VC',
    Ve: 'VE',
    Vg: 'VG',
    Vi: 'VI',
    Vn: 'VN',
    Vu: 'VU',
    Wf: 'WF',
    Ws: 'WS',
    Xk: 'XK',
    Ye: 'YE',
    Yt: 'YT',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestAnyOfCountriesEnum = typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfCountriesEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestAnyOfCountriesEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestEmailCredentialRequestAnyOf1
 */
export interface CredentialRequestPostRequestEmailCredentialRequestAnyOf1 {
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf1
     */
    'type': CredentialRequestPostRequestEmailCredentialRequestAnyOf1TypeEnum;
}

export const CredentialRequestPostRequestEmailCredentialRequestAnyOf1TypeEnum = {
    NUMBER_1: 1
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestAnyOf1TypeEnum = typeof CredentialRequestPostRequestEmailCredentialRequestAnyOf1TypeEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestEmailCredentialRequestAnyOf2
 */
export interface CredentialRequestPostRequestEmailCredentialRequestAnyOf2 {
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestEmailCredentialRequestAnyOf2
     */
    'type': CredentialRequestPostRequestEmailCredentialRequestAnyOf2TypeEnum;
}

export const CredentialRequestPostRequestEmailCredentialRequestAnyOf2TypeEnum = {
    NUMBER_2: 2
} as const;

export type CredentialRequestPostRequestEmailCredentialRequestAnyOf2TypeEnum = typeof CredentialRequestPostRequestEmailCredentialRequestAnyOf2TypeEnum[keyof typeof CredentialRequestPostRequestEmailCredentialRequestAnyOf2TypeEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestSecretCredentialRequest
 */
export interface CredentialRequestPostRequestSecretCredentialRequest {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CredentialRequestPostRequestSecretCredentialRequest
     */
    'blindedRequest': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof CredentialRequestPostRequestSecretCredentialRequest
     */
    'encryptedEncodedBlindedSubject': string;
    /**
     * 
     * @type {string}
     * @memberof CredentialRequestPostRequestSecretCredentialRequest
     */
    'encryptedEncodedBlinding': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost: async (authAuthenticatePostRequest: AuthAuthenticatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authAuthenticatePostRequest' is not null or undefined
            assertParamExists('authAuthenticatePost', 'authAuthenticatePostRequest', authAuthenticatePostRequest)
            const localVarPath = `/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authAuthenticatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthSyncPostRequest} authSyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSyncPost: async (authSyncPostRequest: AuthSyncPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSyncPostRequest' is not null or undefined
            assertParamExists('authSyncPost', 'authSyncPostRequest', authSyncPostRequest)
            const localVarPath = `/auth/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSyncPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyOtpPost: async (authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authVerifyOtpPostRequest' is not null or undefined
            assertParamExists('authVerifyOtpPost', 'authVerifyOtpPostRequest', authVerifyOtpPostRequest)
            const localVarPath = `/auth/verifyOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authVerifyOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialGetPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/credential/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialRequestPost: async (credentialRequestPostRequest: CredentialRequestPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialRequestPostRequest' is not null or undefined
            assertParamExists('credentialRequestPost', 'credentialRequestPostRequest', credentialRequestPostRequest)
            const localVarPath = `/credential/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialRequestPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthenticatePost(authAuthenticatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthSyncPostRequest} authSyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSyncPost(authSyncPostRequest: AuthSyncPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSyncPost(authSyncPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthVerifyOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyOtpPost(authVerifyOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialGetPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialGetPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialRequestPost(credentialRequestPostRequest: CredentialRequestPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialRequestPost(credentialRequestPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: any): AxiosPromise<AuthAuthenticatePost200Response> {
            return localVarFp.authAuthenticatePost(authAuthenticatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthSyncPostRequest} authSyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSyncPost(authSyncPostRequest: AuthSyncPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.authSyncPost(authSyncPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: any): AxiosPromise<AuthVerifyOtpPost200Response> {
            return localVarFp.authVerifyOtpPost(authVerifyOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialGetPost(options?: any): AxiosPromise<CredentialGetPost200Response> {
            return localVarFp.credentialGetPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialRequestPost(credentialRequestPostRequest: CredentialRequestPostRequest, options?: any): AxiosPromise<CredentialGetPost200Response> {
            return localVarFp.credentialRequestPost(credentialRequestPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authAuthenticatePost(authAuthenticatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLogoutPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthSyncPostRequest} authSyncPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authSyncPost(authSyncPostRequest: AuthSyncPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authSyncPost(authSyncPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authVerifyOtpPost(authVerifyOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public credentialGetPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).credentialGetPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public credentialRequestPost(credentialRequestPostRequest: CredentialRequestPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).credentialRequestPost(credentialRequestPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



